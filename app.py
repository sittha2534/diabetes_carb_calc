import streamlit as st
import pandas as pd

# ===== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì =====
def bmi(weight_kg, height_cm):
    h_m = height_cm / 100
    return weight_kg / (h_m * h_m) if weight_kg and height_cm else 0

def ibw_asian(sex, height_cm):
    base = 50 if sex == "‡∏ä‡∏≤‡∏¢" else 45
    return max(0, base + (height_cm - 150) * 0.9)

def calories_per_kg_baseline(bmi, goal):
    kcal = 25
    if bmi >= 27:
        kcal = 20
    if bmi < 18.5:
        kcal = 30
    if goal == "‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å":
        kcal -= 2
    if goal == "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å":
        kcal += 2
    return max(16, min(36, kcal))

def activity_factor(level):
    return {
        "‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô": 1.0,
        "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ö‡∏≤": 1.1,
        "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": 1.2,
        "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å": 1.3,
    }.get(level, 1.0)

def split_carb_per_meals(total_carb_g, pattern="3+1"):
    patterns = {
        "3 ‡∏°‡∏∑‡πâ‡∏≠":    [0.33, 0.34, 0.33, 0],
        "3+1 ‡∏°‡∏∑‡πâ‡∏≠":  [0.30, 0.35, 0.30, 0.05],
        "2+1 ‡∏°‡∏∑‡πâ‡∏≠":  [0.35, 0.45, 0, 0.20]
    }
    w = patterns.get(pattern, patterns["3+1 ‡∏°‡∏∑‡πâ‡∏≠"])
    return [round(total_carb_g * p) for p in w]

# ===== UI =====
st.title("üçö ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏≤‡∏£‡πå‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô")

col1, col2 = st.columns(2)
with col1:
    sex = st.selectbox("‡πÄ‡∏û‡∏®", ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"])
    height = st.number_input("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡∏ã‡∏°.)", 120, 220, 160)
    weight = st.number_input("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏Å.)", 30, 200, 60)
with col2:
    goal = st.selectbox("‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢", ["‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "‡∏Ñ‡∏á‡∏ó‡∏µ‡πà", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å"])
    activity = st.selectbox("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°", ["‡∏ô‡∏±‡πà‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", "‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ö‡∏≤", "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏°‡∏≤‡∏Å"])
    meal_pattern = st.selectbox("‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£", ["3 ‡∏°‡∏∑‡πâ‡∏≠", "3+1 ‡∏°‡∏∑‡πâ‡∏≠", "2+1 ‡∏°‡∏∑‡πâ‡∏≠"])

st.subheader("‚ö°Ô∏è ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (%)")
carb_pct = st.slider("‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï (%)", 20, 60, 50)
protein_pct = st.slider("‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (%)", 10, 30, 20)
fat_pct = max(0, 100 - carb_pct - protein_pct)
st.write(f"üëâ ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô = {fat_pct}%")

# ===== ‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏î =====
if st.button("üîç ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"):
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏Å
    bmi_val = bmi(weight, height)
    ibw_val = ibw_asian(sex, height)
    kcal_per_kg = calories_per_kg_baseline(bmi_val, goal) * activity_factor(activity)
    total_kcal = round(ibw_val * kcal_per_kg)

    carb_kcal = round((carb_pct / 100) * total_kcal)
    protein_kcal = round((protein_pct / 100) * total_kcal)
    fat_kcal = round((fat_pct / 100) * total_kcal)

    carb_g = carb_kcal // 4
    protein_g = protein_kcal // 4
    fat_g = fat_kcal // 9
    carb_split = split_carb_per_meals(carb_g, meal_pattern)

    # ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏° =====
    st.subheader("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô")
    st.write(f"**BMI**: {bmi_val:.1f}")
    st.write(f"**‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô (IBW)**: {ibw_val:.1f} ‡∏Å‡∏Å.")
    st.write(f"**‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°**: {total_kcal} kcal/‡∏ß‡∏±‡∏ô")

    st.write(f"- ‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï: {carb_g} ‡∏Å‡∏£‡∏±‡∏°/‡∏ß‡∏±‡∏ô")
    st.write(f"- ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô: {protein_g} ‡∏Å‡∏£‡∏±‡∏°/‡∏ß‡∏±‡∏ô")
    st.write(f"- ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô: {fat_g} ‡∏Å‡∏£‡∏±‡∏°/‡∏ß‡∏±‡∏ô")

    # ===== ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏°‡∏∑‡πâ‡∏≠ =====
    st.subheader("üç¥ ‡∏™‡∏£‡∏∏‡∏õ‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏°‡∏∑‡πâ‡∏≠")

    meal_names = ["‡πÄ‡∏ä‡πâ‡∏≤", "‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô", "‡πÄ‡∏¢‡πá‡∏ô", "‡∏Ç‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á"]
    num_meals = sum([1 for g in carb_split if g > 0])
    protein_per_meal = round(protein_g / num_meals)

    meal_data = []
    for meal, carb_g_m in zip(meal_names, carb_split):
        if carb_g_m == 0:
            continue

        # ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö
        carb_portion = round(carb_g_m / 15, 1)    # 1 portion carb = 15g
        rice_cup = round(carb_portion / 2, 1)     # 1 ‡∏ó‡∏±‡∏û‡∏û‡∏µ‡∏Ç‡πâ‡∏≤‡∏ß ‚âà 30g carb = 2 portion
        carb_examples = f"{carb_portion} portion ‚âà ‡∏Ç‡πâ‡∏≤‡∏ß {rice_cup} ‡∏ó‡∏±‡∏û‡∏û‡∏µ ‡∏´‡∏£‡∏∑‡∏≠ ‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á {carb_portion} ‡πÅ‡∏ú‡πà‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏™‡πâ‡∏ô‡∏Å‡πã‡∏ß‡∏¢‡πÄ‡∏ï‡∏µ‡πã‡∏¢‡∏ß {carb_portion} ‡∏ñ‡πâ‡∏ß‡∏¢"

        # ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô
        prot_portion = round(protein_per_meal / 7, 1)  # 1 portion protein ‚âà 7g
        prot_examples = f"{prot_portion} portion ‚âà ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå {prot_portion*30:.0f} ‡∏Å‡∏£‡∏±‡∏° ‡∏´‡∏£‡∏∑‡∏≠ ‡πÑ‡∏Ç‡πà {prot_portion} ‡∏ü‡∏≠‡∏á ‡∏´‡∏£‡∏∑‡∏≠ ‡∏õ‡∏•‡∏≤ {prot_portion} ‡∏ä‡∏¥‡πâ‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏ï‡πâ‡∏≤‡∏´‡∏π‡πâ {prot_portion} ‡∏Å‡πâ‡∏≠‡∏ô‡πÄ‡∏•‡πá‡∏Å"

        meal_data.append([
            meal,
            carb_g_m, f"{carb_portion} portion", f"{rice_cup} ‡∏ó‡∏±‡∏û‡∏û‡∏µ", carb_examples,
            protein_per_meal, f"{prot_portion} portion", prot_examples
        ])

    df_meal = pd.DataFrame(meal_data, columns=[
        "‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        "‡∏Ñ‡∏≤‡∏£‡πå‡∏ö (g)", "portion ‡∏Ñ‡∏≤‡∏£‡πå‡∏ö", "‚âà ‡∏Ç‡πâ‡∏≤‡∏ß (‡∏ó‡∏±‡∏û‡∏û‡∏µ)", "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ñ‡∏≤‡∏£‡πå‡∏ö",
        "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (g)", "portion ‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô", "‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô"
    ])

    st.table(df_meal)
